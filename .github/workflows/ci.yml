<<<<<<< HEAD
name: CI 
=======
name: CI
>>>>>>> 52bfc88fb3bba01f91657fa35d623528ec21b05c

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: auth

    steps:
      # –®–∞–≥ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      - name: Checkout code
        uses: actions/checkout@v3

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ JDK –≤–µ—Ä—Å–∏–∏ 11
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      - name: Build and Run Tests
        run: |
          echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
          ./gradlew clean build test
        continue-on-error: true

      # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
      - name: Parse Test Results
        if: always()
        run: |
          echo "üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
          # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          rm -f test-results.txt
<<<<<<< HEAD

          if ls build/test-results/test/*.xml 1> /dev/null 2>&1; then
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            TOTAL_TESTS=0
            TOTAL_FAILURES=0
            TOTAL_SKIPPED=0

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2
            escape_markdown() {
              local input="$1"
              echo "$input" | sed -E 's/([_*\[\]()~`>#+=|{}\.\!\-])/\\\1/g'
            }

            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            FAILED_TESTS_DETAILS=""

            for file in build/test-results/test/*.xml; do
              if [ -f "$file" ]; then
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ tests, failures –∏ skipped
                tests=$(grep -oE 'tests="[0-9]+"' "$file" | head -1 | grep -oE '[0-9]+')
                failures=$(grep -oE 'failures="[0-9]+"' "$file" | head -1 | grep -oE '[0-9]+')
                skipped=$(grep -oE 'skipped="[0-9]+"' "$file" | head -1 | grep -oE '[0-9]+')

                # –ó–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ
                tests=${tests:-0}
                failures=${failures:-0}
                skipped=${skipped:-0}

                TOTAL_TESTS=$((TOTAL_TESTS + tests))
                TOTAL_FAILURES=$((TOTAL_FAILURES + failures))
                TOTAL_SKIPPED=$((TOTAL_SKIPPED + skipped))

                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –¥–µ—Ç–∞–ª–∏
                if [ "$failures" -gt 0 ]; then
                  while read -r testcase; do
                    classname=$(echo "$testcase" | grep -oE 'classname="[^"]+"' | cut -d'"' -f2)
                    name=$(echo "$testcase" | grep -oE 'name="[^"]+"' | cut -d'"' -f2)
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ <failure>
                    message=$(echo "$testcase" | grep -Eoz '<failure[^>]*>(.*?)</failure>' | tr -d '\0' | sed 's/<failure[^>]*>//;s/<\/failure>//')
                    # –£–±–∏—Ä–∞–µ–º CDATA, –µ—Å–ª–∏ –µ—Å—Ç—å
                    message=$(echo "$message" | sed 's/<!\[CDATA\[//;s/\]\]>//')
                    # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
                    message=$(echo "$message" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    classname=$(escape_markdown "$classname")
                    name=$(escape_markdown "$name")
                    message=$(escape_markdown "$message")
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    FAILED_TESTS_DETAILS="${FAILED_TESTS_DETAILS}\nüîª *${classname} - ${name}:*\n${message}"
                  done < <(grep -Eoz '<testcase.*?<failure.*?</testcase>' "$file")
                fi
              fi
            done

            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            TOTAL_PASSED=$((TOTAL_TESTS - TOTAL_FAILURES - TOTAL_SKIPPED))

            echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $TOTAL_PASSED"
            echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $TOTAL_FAILURES"
            echo "üü° –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $TOTAL_SKIPPED"
            echo "üîπ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
            echo "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*" > test-results.txt
            echo "‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:* $TOTAL_PASSED" >> test-results.txt
            echo "‚ùå *–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:* $TOTAL_FAILURES" >> test-results.txt
            echo "üü° *–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:* $TOTAL_SKIPPED" >> test-results.txt
            echo "üîπ *–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:* $TOTAL_TESTS" >> test-results.txt

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –¥–µ—Ç–∞–ª–∏
            if [ "$TOTAL_FAILURES" -gt 0 ]; then
              echo -e "\nüìã *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:*" >> test-results.txt
              echo -e "$FAILED_TESTS_DETAILS" >> test-results.txt
            fi

=======
          if ls build/test-results/test/*.xml 1> /dev/null 2>&1; then
            PASSED=$(grep -oP '<testsuite[^>]* tests="\K\d+' build/test-results/test/*.xml | paste -sd+ - | bc)
            FAILED=$(grep -oP '<testsuite[^>]* failures="\K\d+' build/test-results/test/*.xml | paste -sd+ - | bc)
            SKIPPED=$(grep -oP '<testsuite[^>]* skipped="\K\d+' build/test-results/test/*.xml | paste -sd+ - | bc)
            TOTAL=$PASSED
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            PASSED=${PASSED:-0}
            FAILED=${FAILED:-0}
            SKIPPED=${SKIPPED:-0}
            TOTAL=${TOTAL:-0}
            echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            echo "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $((PASSED - FAILED - SKIPPED))"
            echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $FAILED"
            echo "üü° –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $SKIPPED"
            echo "üîπ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL"
            echo "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*" > test-results.txt
            echo "‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:* $((PASSED - FAILED - SKIPPED))" >> test-results.txt
            echo "‚ùå *–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:* $FAILED" >> test-results.txt
            echo "üü° *–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:* $SKIPPED" >> test-results.txt
            echo "üîπ *–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:* $TOTAL" >> test-results.txt
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
            if [ "$FAILED" -gt 0 ]; then
              echo -e "\nüìã *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:*" >> test-results.txt
              # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
              escape_markdown() {
                local input="$1"
                # –ü—Ä–æ—Å—Ç–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ Markdown
                echo "$input" | sed -e 's/[&/\]/\\&/g' -e 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g'
              }
              for file in build/test-results/test/*.xml; do
                while read -r testcase; do
                  classname=$(echo "$testcase" | grep -oP 'classname="\K[^"]+')
                  name=$(echo "$testcase" | grep -oP 'name="\K[^"]+')
                  message=$(echo "$testcase" | grep -oP '<failure message=".*?">\K.*?(?=</failure>)' | sed 's/<!\[CDATA\[//;s/\]\]>//')
                  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                  classname=$(escape_markdown "$classname")
                  name=$(escape_markdown "$name")
                  message=$(escape_markdown "$message")
                  echo -e "üîª *$classname - $name:*\n$message" >> test-results.txt
                done < <(grep -Pzo '<testcase.*?<failure.*?</testcase>' "$file")
              done
            fi
>>>>>>> 52bfc88fb3bba01f91657fa35d623528ec21b05c
          else
            echo "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            echo "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*" > test-results.txt
            echo "‚ùóÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã." >> test-results.txt
          fi
<<<<<<< HEAD

=======
>>>>>>> 52bfc88fb3bba01f91657fa35d623528ec21b05c
      # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      - name: Send Telegram Notification
        if: always()
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
<<<<<<< HEAD
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name || github.event.pusher.name || github.event.pull_request.user.login || github.actor }}
=======
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name || github.event.pull_request.user.login || github.actor }}
>>>>>>> 52bfc88fb3bba01f91657fa35d623528ec21b05c
          COMMIT_MESSAGE: ${{ github.event.head_commit.message || github.event.pull_request.title }}
        run: |
          echo "üì≤ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram..."
          if [ -z "$BOT_TOKEN" ] || [ -z "$CHAT_ID" ]; then
            echo "‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            exit 1
          fi
<<<<<<< HEAD

          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
          escape_markdown() {
            local input="$1"
            echo "$input" | sed -E 's/([_*\[\]()~`>#+=|{}\.\!\-])/\\\1/g'
          }

          STATUS=$(cat test-results.txt)
          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞
          COMMIT_AUTHOR_ESCAPED=$(escape_markdown "$COMMIT_AUTHOR")
          COMMIT_MESSAGE_ESCAPED=$(escape_markdown "$COMMIT_MESSAGE")
          STATUS_ESCAPED=$(escape_markdown "$STATUS")

          MESSAGE=$'üèó *–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\nüë§ *–ê–≤—Ç–æ—Ä –∫–æ–º–º–∏—Ç–∞:* '"$COMMIT_AUTHOR_ESCAPED"$'\nüí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:* '"$COMMIT_MESSAGE_ESCAPED"$'\n\n'"$STATUS_ESCAPED"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
          MESSAGE_LENGTH=${#MESSAGE}
          if [ "$MESSAGE_LENGTH" -gt 4000 ]; then
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            echo "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ($MESSAGE_LENGTH —Å–∏–º–≤–æ–ª–æ–≤). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª."
            echo "$MESSAGE" > message.txt
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendDocument" \
              -F chat_id="$CHAT_ID" \
              -F parse_mode="MarkdownV2" \
              -F document=@"message.txt" \
              -F caption="üèó *–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\nüë§ *–ê–≤—Ç–æ—Ä –∫–æ–º–º–∏—Ç–∞:* $COMMIT_AUTHOR_ESCAPED\nüí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:* $COMMIT_MESSAGE_ESCAPED")
          else
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
              -d chat_id="$CHAT_ID" \
              -d parse_mode="MarkdownV2" \
              --data-urlencode text="$MESSAGE")
          fi

=======
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
          escape_markdown() {
            local input="$1"
            # –ü—Ä–æ—Å—Ç–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –≤ Markdown
            echo "$input" | sed -e 's/[&/\]/\\&/g' -e 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g'
          }
          STATUS=$(cat test-results.txt)
          # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞, –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–µ
          COMMIT_AUTHOR_ESCAPED=$(escape_markdown "$COMMIT_AUTHOR")
          COMMIT_MESSAGE_ESCAPED=$(escape_markdown "$COMMIT_MESSAGE")
          STATUS_ESCAPED=$(escape_markdown "$STATUS")
          MESSAGE=$'üèó *–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\nüë§ *–ê–≤—Ç–æ—Ä –∫–æ–º–º–∏—Ç–∞:* '"$COMMIT_AUTHOR_ESCAPED"$'\nüí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:* '"$COMMIT_MESSAGE_ESCAPED"$'\n\n'"$STATUS_ESCAPED"
          RESPONSE=$(curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id="$CHAT_ID" \
            -d parse_mode="MarkdownV2" \
            --data-urlencode text="$MESSAGE")
>>>>>>> 52bfc88fb3bba01f91657fa35d623528ec21b05c
          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
          else
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
            echo "–û—Ç–≤–µ—Ç –æ—Ç Telegram API: $RESPONSE"
            exit 1
<<<<<<< HEAD
          fi
=======
          fi
>>>>>>> 52bfc88fb3bba01f91657fa35d623528ec21b05c
